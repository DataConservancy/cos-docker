<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2016 Johns Hopkins University
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.dataconservancy.cos</groupId>
    <artifactId>cos-docker</artifactId>
    <packaging>jar</packaging>
    <name>COS Docker Images</name>
    <description>Docker Images for the Center for Open Science Open Science</description>
    <version>1.0.0-SNAPSHOT</version>

    <parent>
        <groupId>org.dataconservancy</groupId>
        <artifactId>project-pom</artifactId>
        <version>8</version>
    </parent>

    <!-- Modules  =================================================== -->

    <!-- Properties ================================================= -->

    <properties>

        <!--
          Properties used to set environment variables for docker-compose executions, below.  These are special
          environment variables used by the Docker Engine to talk to the Docker daemon.  Currently these property
          values are hard-coded, and must be set for each build environment.  Externalizing these properties is
          a TODO.
        -->

        <docker.host.url>${env.DOCKER_HOST}</docker.host.url>
        <docker.machine.name>${env.DOCKER_MACHINE_NAME}</docker.machine.name>
        <docker.machine.ip>${env.DOCKER_MACHINE_IP}</docker.machine.ip>
        <docker.tls.verify>0</docker.tls.verify>

        <!--
          Properties used to set environment variables for docker-compose executions, below.  Ultimately, the values
          specified in these Maven properties are used to interpolate Python settings files present in the Docker
          containers at runtime.  They are passed to docker-compose, which in turn pass them into newly created
          containers, where they are used by entry point scripts to perform interpolation.
         -->

        <db.host>tokumx</db.host>
        <elastic.uri>elasticsearch</elastic.uri>
        <docker.osf.host>${docker.machine.ip}:5000</docker.osf.host>
        <cas.server.url>http://${docker.machine.ip}:8080</cas.server.url>
        <api.domain>http://${docker.machine.ip}:8000/</api.domain>
        <domain>http://${docker.machine.ip}:5000</domain>
        <waterbutler.url>http://${docker.machine.ip}:7777</waterbutler.url>
        <waterbutler.addrs>['${docker.machine.ip}']</waterbutler.addrs>
        <toku.huge.pages>1</toku.huge.pages>

    </properties>


    <!-- Build  ===================================================== -->

    <build>

        <pluginManagement>

            <plugins>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                        <encoding>UTF-8</encoding>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-verifier-plugin</artifactId>
                    <version>1.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.15.16</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.5.0</version>
                </plugin>

            </plugins>

        </pluginManagement>

        <plugins>

            <!--
              The docker-maven-plugin is used to build fresh Docker images from the Docker files found in
              src/main/resources/monolithic/osf.  Note it executes in the prepare-package phase, before any
              Docker containers are started, or any ITs are executed.
            -->

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <sourceDirectory>src/main/resources/monolithic/osf</sourceDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>build-images</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <images>
                                <image>
                                    <alias>fakecas</alias>
                                    <name>dataconservancy/cos-fakecas:latest</name>
                                    <build>
                                        <dockerFileDir>fakecas</dockerFileDir>
                                    </build>
                                </image>
                                <image>
                                    <alias>cos-osf-runtime</alias>
                                    <name>dataconservancy/cos-osf-runtime:latest</name>
                                    <build>
                                        <dockerFileDir>runtime</dockerFileDir>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
              The exec-maven-plugin is used to invoke `docker-compose` to create containers prior to ITs, and to
              destroy them after ITs run.  It makes Maven properties available to `docker-compose` as environment
              variables.  Note that the plugin executes in `pre-integration-test` and `post-integration-test` phases,
              to allow ITs to run in the `integration-test` phase.
            -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                    <workingDirectory>src/main/resources/monolithic/osf</workingDirectory>
                    <environmentVariables>
                        <DOCKER_HOST>${docker.host.url}</DOCKER_HOST>
                        <DOCKER_MACHINE_NAME>${docker.machine.name}</DOCKER_MACHINE_NAME>
                        <DOCKER_TLS_VERIFY>${docker.tls.verify}</DOCKER_TLS_VERIFY>
                        <DB_HOST>${db.host}</DB_HOST>
                        <ELASTIC_URI>${elastic.uri}</ELASTIC_URI>
                        <DOCKER_OSF_HOST>${docker.osf.host}</DOCKER_OSF_HOST>
                        <CAS_SERVER_URL>${cas.server.url}</CAS_SERVER_URL>
                        <API_DOMAIN>${api.domain}</API_DOMAIN>
                        <DOMAIN>${domain}</DOMAIN>
                        <WATERBUTLER_URL>${waterbutler.url}</WATERBUTLER_URL>
                        <WATERBUTLER_ADDRS>${waterbutler.addrs}</WATERBUTLER_ADDRS>
                        <TOKU_HUGE_PAGES_OK>${toku.huge.pages}</TOKU_HUGE_PAGES_OK>
                    </environmentVariables>
                </configuration>
                <executions>
                    <execution>
                        <id>docker-compose-up</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker-compose</executable>
                            <commandlineArgs>up -d</commandlineArgs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>docker-compose-down</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker-compose</executable>
                            <commandlineArgs>stop</commandlineArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
              Integration tests run here, using failsafe defaults.
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.rat</groupId>
                <artifactId>apache-rat-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>settings.tar</exclude>
                        <exclude>settings.xml</exclude>
                        <exclude>known_hosts</exclude>
                        <exclude>.travis.yml</exclude>
                        <exclude>travis_dc</exclude>
                        <exclude>**/*.md</exclude>
                        <exclude>**/*.json</exclude>
                        <exclude>**/*.tmpl</exclude>
                        <exclude>**/*.inc</exclude>
                        <exclude>**/.env</exclude>
                        <exclude>**/smb.conf</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-java</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>[1.8.0-31,)</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <configuration>
                    <preparationGoals>clean install</preparationGoals>
                    <goals>deploy</goals>
                    <localCheckout>true</localCheckout>
                    <pushChanges>false</pushChanges>
                </configuration>
            </plugin>

        </plugins>

    </build>

    <!-- Dependency Management ====================================== -->

    <dependencyManagement>

    </dependencyManagement>

    <!-- Dependencies ================================================ -->

    <dependencies>

        <!-- Provided  =================================================== -->

        <!-- Compile  ==================================================== -->

        <!-- Runtime  ==================================================== -->

        <!-- Test ======================================================== -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!-- Repositories =============================================== -->

    <repositories>
        <repository>
            <id>dc.maven.releases</id>
            <name>Data Conservancy Public Maven 2 Repository (releases)</name>
            <layout>default</layout>
            <url>http://maven.dataconservancy.org/public/releases/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <id>dc.maven.snapshots</id>
            <name>Data Conservancy Public Maven 2 Repository (snapshots)</name>
            <layout>default</layout>
            <url>http://maven.dataconservancy.org/public/snapshots/</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>

    </repositories>
</project>
